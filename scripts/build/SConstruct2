PERFORMANCE_PROFILER = False # temp hack. add command-line switch

import os
import sys

from scons_util import exclude, find, init_env, relocate_paths, export_dynamic
from scons_util import import_OpenGL, import_OpenMP, import_GSL, import_Qt, import_zlib, import_python

CXXFLAGS="-std=c++11"

SRCDIRS = ['src/' + x
		   for x in ['agent',
					 'app',
					 'brain',
					 'complexity',
					 'debugger',
					 'environment',
					 'genome',
					 'graphics',
					 'logs',
					 'proplib',
					 'main',
					 'monitor',
					 'tools',
					 'ui',
					 'utils']]

def build():
	envs = env_create()

	build_cppprops(envs['cppprops'])

def build_cppprops(env):
	blddir = '.bld/cppprops/bld'

	sources = ['.bld/cppprops/src/generated.cpp']

	env.VariantDir(blddir, '.bld/cppprops/src', False)

	return env.SharedLibrary( '.bld/cppprops/bin/cppprops',
							  sources )

def env_create():
	envs = {}


	env = env_common = init_env(Environment())
	env.Append( CPPSUFFIXES = ['.cp'] )
	if os.popen('uname').readlines()[0].strip() == 'Darwin':
		env['CXX'] = '/usr/local/bin/g++'
		env['CC'] = '/usr/local/bin/g++'
	#cpp_flags = ['-g', '-Wall', '-O2' ]
	cpp_flags = ['-g', '-Wall', '-Wno-format-security', '-std=gnu++0x' ]

	if PERFORMANCE_PROFILER:
		# use the gnu gprof
		cpp_flags += ['-pg']
		env.Append( LINKFLAGS = ['-pg'] )

	try:
		cpp_flags += os.environ['CPPFLAGS'].split(' ')
	except KeyError:
		pass
	env.Append( CPPFLAGS = cpp_flags )
	env.Append( CPPPATH = find('src',
							   type = 'dir') )
	try:
		env.Append( LINKFLAGS = os.environ['LDFLAGS'].split(' ') )
	except KeyError:
		pass

	# This allows proplib dynamic properties to reference globals in Polyworld.
	export_dynamic(env)

	import_OpenMP(env)
	import_GSL(env)

	env = envs['Polyworld'] = env_common.Clone()
	import_OpenGL(env)
	import_Qt(env,
			  qtmodules = ['QtCore',
						   'QtGui',
						   'QtOpenGL'])
	import_zlib(env)
	try:
		python_version = os.environ['PYTHONVER']
	except KeyError:
		python_version = None

	if python_version:
		import_python(env, python_version)
	else:
		import_python(env)

	env = envs['CalcComplexity'] = env_common.Clone()
	import_zlib(env)

	envs['PwMoviePlayer'] = envs['Polyworld'].Clone()

	envs['rancheck'] = envs['CalcComplexity'].Clone()

	envs['proputil'] = envs['CalcComplexity'].Clone()

	if python_version:
		import_python( envs['proputil'], python_version )
	else:
		import_python( envs['proputil'] )

	envs['pmvutil'] = envs['PwMoviePlayer'].Clone()

	envs['qt_clust'] = envs['CalcComplexity'].Clone()

	envs['cppprops'] = envs['Polyworld'].Clone()

	return envs

def hack_addCpExtension():
	# treat *.cp as C++ source
	module = __import__('SCons.Tool.c++',
						globals(),
						locals(),
						['CXXSuffixes'])
	module.CXXSuffixes += ['.cp']

	# scan *.cp for #include
	from SCons.Scanner.C import CScanner
	builder_object = DefaultEnvironment()["BUILDERS"]["Object"]
	builder_object.source_scanner.add_scanner('.cp',
											  CScanner())

def hack_createSrcDir():
	if not os.path.exists('src'):
		os.mkdir('src')

	for dir in SRCDIRS:
		if not os.path.exists(dir):
			src = '../' + dir[4:] # strip src/
			dst = dir
			os.symlink(src,dst)

################################################################################

hack_addCpExtension()
hack_createSrcDir()

build()
